<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!--
wxFormBuilder - A Visual Dialog Editor for wxWidgets.
Copyright (C) 2005 José Antonio Hurtado

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

Written by
  José Antonio Hurtado - joseantonio.hurtado@gmail.com
  Juan Antonio Ortega  - jortegalalmolda@gmail.com
-->
<package name="窗体类" lib="forms" icon="frame16x16.png" desc="wxWidgets windows">

  <objectinfo class="wxTopLevelWindow" smallIcon="wxwindow.png" type="interface">
    <event name="OnActivate" class="wxActivateEvent" help="处理一个wxEVT_ACTIVATE事件"/>
    <event name="OnActivateApp" class="wxActivateEvent" help="处理一个wxEVT_ACTIVATE_APP事件"/>
    <event name="OnClose" class="wxCloseEvent" help="处理一个关闭事件"/>
    <event name="OnHibernate" class="wxActivateEvent" help="处理休眠事件，提供成员函数。此事件仅适用于wxApp，并且仅适用于Windows SmartPhone和PocketPC。它是在系统内存不足时生成的；应用程序应释放尽可能多的内存，并在接收到wxEVT_ACTIVATE或wxEVT_ACTIVATE_APP事件时恢复完全工作状态。"/>
    <event name="OnIconize" class="wxIconizeEvent" help="处理一个wxEVT_ICONIZE事件。仅适用于wxMSW、wxGTK端口。"/>
    <event name="OnMaximize" class="wxMaximizeEvent" help="处理一个wxEVT_ICONIZE事件。目前，此事件仅在wxMSW、wxGTK和wxOSX/Cocoa端口中生成。"/>
    <event name="OnShow" class="wxShowEvent" help="处理一个wxEVT_SHOW事件，仅适用于wxMSW、wxGTK端口。"/>
    <event name="OnMove" class="wxMoveEvent" help="处理一个wxEVT_MOVE事件, 当窗口被移动时生成。"/>
    <event name="OnMoving" class="wxMoveEvent" help="处理一个wxEVT_MOVING事件, 它是在用户移动窗口时生成的。 这些事件目前仅由wxMSW端口\生成。"/>
    <event name="OnMoveStart" class="wxMoveEvent" help="处理一个wxEVT_MOVE_START事件, 当用户开始移动或调整窗口大小时生成。这些事件目前仅由wxMSW端口\生成。"/>
    <event name="OnMoveEnd" class="wxMoveEvent" help="处理一个wxEVT_MOVE_END事件, 当用户停止移动或调整窗口大小时生成。这些事件目前仅由wxMSW端口\生成。"/>
    <event name="OnIdle" class="wxIdleEvent" help="处理一个wxEVT_IDLE事件"/>
  </objectinfo>

  <objectinfo class="AUI Events" smallIcon="wxwindow.png" type="interface">
    <event name="OnAuiPaneButton" class="wxAuiManagerEvent" help="事件仅在AUI管理的窗体下发出。"/>
    <event name="OnAuiPaneClose" class="wxAuiManagerEvent" help="事件仅在AUI管理的窗体下发出。"/>
    <event name="OnAuiPaneMaximize" class="wxAuiManagerEvent" help="事件仅在AUI管理的窗体下发出。"/>
    <event name="OnAuiPaneRestore" class="wxAuiManagerEvent" help="事件仅在AUI管理的窗体下发出。"/>
    <event name="OnAuiPaneActivated" class="wxAuiManagerEvent" help="事件仅在AUI管理的窗体下发出。"/>
    <event name="OnAuiRender" class="wxAuiManagerEvent" help="事件仅在AUI管理的窗体下发出。"/>
  </objectinfo>

  <objectinfo class="Frame" icon="frame.xpm" type="form">
    <inherits class="wxTopLevelWindow"/>
    <inherits class="AUI Events"/>
    <inherits class="wxWindow">
      <property name="window_style">wxTAB_TRAVERSAL</property>
      <property name="size" type="wxSize">500,300</property>
    </inherits>
    <property name="name" type="text" hidden="1">MyFrame</property>
    <property name="title" type="wxString_i18n"/>
    <property name="style" type="bitlist">
      <option name="wxDEFAULT_FRAME_STYLE" help="定义为 wxMINIMIZE_BOX | wxMAXIMIZE_BOX | wxRESIZE_BORDER | wxSYSTEM_MENU | wxCAPTION | wxCLOSE_BOX | wxCLIP_CHILDREN"/>
      <option name="wxICONIZE" help="显示已图标化（最小化）的框架。仅限Windows。"/>
      <option name="wxCAPTION" help="在框架上添加标题"/>
      <option name="wxMINIMIZE" help="与wxICONIZE相同。仅限Windows。"/>
      <option name="wxMINIMIZE_BOX" help="在框架上显示最小化框。"/>
      <option name="wxMAXIMIZE" help="显示最大化的框架。仅Windows。"/>
      <option name="wxMAXIMIZE_BOX" help="在框架上显示最大化框。"/>
      <option name="wxCLOSE_BOX" help="在框架上显示一个关闭框。"/>
      <option name="wxSTAY_ON_TOP" help="保持在所有其他窗口的顶部，另请参阅wxFRAME_FLOAT_on_PARENT。"/>
      <option name="wxSYSTEM_MENU" help="显示系统菜单。"/>
      <option name="wxRESIZE_BORDER" help="在窗口周围显示可调整大小的边框"/>
      <option name="wxFRAME_TOOL_WINDOW" help="导致创建一个带有小标题栏的框架；该框架不会出现在Windows或GTK+下的任务栏中。"/>
      <option name="wxFRAME_NO_TASKBAR" help="创建一个正常的框架，但它不会出现在Windows或GTK+下的任务栏中（注意，它会最小化到Windows下的桌面窗口，这对用户来说可能很奇怪，因此最好只使用这种样式，而不使用wxMINIMIZE_BOX样式）。在wxGTK中，只有当GTK+版本至少为2.2并且窗口管理器支持_NET_WM_STATE_SKIP_TASKBAR提示时，才尊重该标志。在其他平台下没有效果。"/>
      <option name="wxFRAME_FLOAT_ON_PARENT" help="框架将始终位于其父框架的顶部（与wxSTAY_on_top不同）。使用此样式创建的框架必须具有非NULL父级。"/>
      <option name="wxFRAME_SHAPED" help="允许使用SetShape方法更改具有此样式的窗口的形状。"/>
      wxDEFAULT_FRAME_STYLE
    </property>
    <property name="extra_style" type="bitlist">
      <option name="wxFRAME_EX_CONTEXTHELP" help="在Windows下，在标题上放置一个查询按钮。按下时，Windows将进入上下文相关的帮助模式，如果用户单击应用程序窗口，wxWidgets将发送wxEVT_help事件。您不能将此样式与wxMAXIMIZE_BOX或wxMINIMIZE_BOX一起使用，所以您应该使用wxDEFAULT_FRAME_style &amp;&amp;~ (wxMINIMIZE_BOX | wxMAXIMIZE_BOX) 用于具有此样式的框架 (默认情况下，对话框没有最小化或最大化框). 注意: 本项目的 &quot;help_provider&quot;属性 必须设置上下文相关帮助才能工作"/>
      <option name="wxFRAME_EX_METAL" help="在Mac OS X上，具有这种风格的框架将以金属外观显示。这是一种额外的风格。"/>
    </property>
    <property name="center" type="option" help="将对话框按所选方向居中显示。">
      <option name=""/>
      <option name="wxHORIZONTAL"/>
      <option name="wxVERTICAL"/>
      <option name="wxBOTH"/>
      wxBOTH
    </property>
    <property name="two_step_creation" type="bool" help="添加用于两步创建的构造函数和方法。这需要基类支持两步创建。">0</property>
    <property name="xrc_skip_sizer" type="bool" help="仅适用于XRC。如果只有一个子级，请不要生成第一个sizer。">1</property>
    <property name="event_handler" type="option" help="仅适用于C++&#x0A;如何声明和实现事件处理程序的方法。">
      <option name="decl_pure_virtual" help="只将事件处理程序声明为纯虚方法。"/>
      <option name="decl" help="声明事件处理程序，但不生成默认实现。实现应该在单独的.cpp文件中完成（而不是在生成的文件中！）。"/>
      <option name="impl_virtual" help="将事件处理程序声明为虚拟方法并生成默认实现。"/>
      impl_virtual
    </property>
    <property name="aui_managed" help="通过AUI管理器管理这个框架。" type="bool">0</property>
    <property name="aui_manager_style" help="配置AUI管理器。" type="bitlist">
      <option name="wxAUI_MGR_DEFAULT" help="默认行为，组合为： wxAUI_MGR_ALLOW_FLOATING | wxAUI_MGR_TRANSPARENT_HINT | wxAUI_MGR_HINT_FADE | wxAUI_MGR_NO_VENETIAN_BLINDS_FADE."/>
      <option name="wxAUI_MGR_ALLOW_FLOATING" help="允许取消停靠窗格，使其采用wxMiniFrame的形式。"/>
      <option name="wxAUI_MGR_ALLOW_ACTIVE_PANE" help="当窗格的标题栏处于激活状态时，更改标题栏的颜色。"/>
      <option name="wxAUI_MGR_TRANSPARENT_DRAG" help="使窗格在移动过程中透明。"/>
      <option name="wxAUI_MGR_TRANSPARENT_HINT" help="停靠的可能位置由半透明区域指示。"/>
      <option name="wxAUI_MGR_VENETIAN_BLINDS_HINT" help="通过逐渐出现部分透明的提示来指示停靠的可能位置。"/>
      <option name="wxAUI_MGR_RECTANGLE_HINT" help="停靠的可能位置由矩形轮廓表示。"/>
      <option name="wxAUI_MGR_HINT_FADE" help="窗格可以停靠的半透明区域逐渐出现。"/>
      <option name="wxAUI_MGR_NO_VENETIAN_BLINDS_FADE" help="用于补充wxAUI_MGR_VENETIAN_LINDS_HINT，以立即显示停靠提示。"/>
      <option name="wxAUI_MGR_LIVE_RESIZE" help="调整停靠窗格的大小时，会实时刷新其内容（而不是单独移动边框并在最后刷新内容）。"/>
      wxAUI_MGR_DEFAULT
    </property>
  </objectinfo>

  <objectinfo class="Panel" icon="panel.xpm" type="form">
    <inherits class="AUI Events"/>
    <inherits class="wxWindow">
      <property name="window_style">wxTAB_TRAVERSAL</property>
      <property name="size" type="wxSize">500,300</property>
    </inherits>
    <property name="name" type="text" hidden="1">MyPanel</property>
    <property name="two_step_creation" type="bool" help="添加用于两步创建的构造函数和方法。这需要基类支持两步创建。">0</property>
    <property name="event_handler" type="option" help="仅适用于C++&#x0A;如何声明和实现事件处理程序的方法。">
      <option name="decl_pure_virtual" help="仅将事件处理程序声明为纯虚拟方法。"/>
      <option name="decl" help="声明事件处理程序，但不生成默认实现。实现应该在单独的.cpp文件中完成（而不是在生成的文件中！）。"/>
      <option name="impl_virtual" help="将事件处理程序声明为虚拟方法并生成默认实现。"/>
      impl_virtual
    </property>
    <event name="OnInitDialog" class="wxInitDialogEvent" help="处理一个wxEVT_INIT_DIALOG事件，在初始化的对话框或面板时发送wxEVT_INIT_DIALOG。"/>
    <property name="aui_managed" help="由AUI管理器管理此面板。" type="bool">0</property>
    <property name="aui_manager_style" help="配置AUI管理器。" type="bitlist">
      <option name="wxAUI_MGR_DEFAULT" help="默认行为，组合为： wxAUI_MGR_ALLOW_FLOATING | wxAUI_MGR_TRANSPARENT_HINT | wxAUI_MGR_HINT_FADE | wxAUI_MGR_NO_VENETIAN_BLINDS_FADE."/>
      <option name="wxAUI_MGR_ALLOW_FLOATING" help="允许取消停靠窗格，使其采用wxMiniFrame的形式。"/>
      <option name="wxAUI_MGR_ALLOW_ACTIVE_PANE" help="当窗格的标题栏处于激活状态时，更改标题栏的颜色。"/>
      <option name="wxAUI_MGR_TRANSPARENT_DRAG" help="使窗格在移动过程中透明。"/>
      <option name="wxAUI_MGR_TRANSPARENT_HINT" help="停靠的可能位置由半透明区域指示。"/>
      <option name="wxAUI_MGR_VENETIAN_BLINDS_HINT" help="通过逐渐出现部分透明的提示来指示停靠的可能位置。"/>
      <option name="wxAUI_MGR_RECTANGLE_HINT" help="停靠的可能位置由矩形轮廓表示。"/>
      <option name="wxAUI_MGR_HINT_FADE" help="窗格可以停靠的半透明区域逐渐出现。"/>
      <option name="wxAUI_MGR_NO_VENETIAN_BLINDS_FADE" help="用于补充wxAUI_MGR_VENETIAN_LINDS_HINT，以立即显示停靠提示。"/>
      <option name="wxAUI_MGR_LIVE_RESIZE" help="调整停靠窗格的大小时，会实时刷新其内容（而不是单独移动边框并在最后刷新内容）。"/>
      wxAUI_MGR_DEFAULT
    </property>
  </objectinfo>

  <objectinfo class="Dialog" icon="dialog.xpm" type="form" base="wxDialog">
    <inherits class="wxTopLevelWindow"/>
    <inherits class="AUI Events"/>
    <inherits class="wxWindow"/>
    <property name="name" type="text" hidden="1">MyDialog</property>
    <property name="title" type="wxString_i18n"/>
    <property name="style" type="bitlist">
      <option name="wxCAPTION" help="在对话框上加上标题。"/>
      <option name="wxDEFAULT_DIALOG_STYLE" help="相当于wxCAPTION、wxCLOSE_BOX和wxSYSTEM_MENU的组合（最后一个不在Unix下使用）"/>
      <option name="wxRESIZE_BORDER" help="在窗口周围显示一个可调整大小的框架。"/>
      <option name="wxSYSTEM_MENU" help="显示系统菜单。"/>
      <option name="wxCLOSE_BOX" help="在对话框上显示一个关闭框。"/>
      <option name="wxMAXIMIZE_BOX" help="在对话框上显示最大化框。"/>
      <option name="wxMINIMIZE_BOX" help="在对话框上显示最小化框。"/>
      <option name="wxSTAY_ON_TOP" help="该对话框位于所有其他窗口的顶部。"/>
      <option name="wxDIALOG_NO_PARENT" help="默认情况下，使用NULL父窗口创建的对话框将被赋予应用程序的顶级窗口作为父窗口。使用此样式可以防止这种情况发生，并创建一个孤立对话框。对于模式对话框，不建议这样做。"/>
      wxDEFAULT_DIALOG_STYLE
    </property>
    <property name="extra_style" type="bitlist">
      <option name="wxDIALOG_EX_CONTEXTHELP" help="在Windows下，在标题上放置一个查询按钮。按下时，Windows将进入上下文相关的帮助模式，如果用户单击应用程序窗口，wxWidgets将发送wxEVT_help事件。注意: 必须设置项目的 &quot;help_provider&quot; 属性才能使上下文相关的帮助起作用。"/>
      <option name="wxDIALOG_EX_METAL" help="在Mac OS X上，具有这种风格的框架将以金属外观显示。这是一种额外的风格。"/>
    </property>
    <property name="center" type="option" help="将对话框在显示器上按所选方向居中。">
      <option name=""/>
      <option name="wxHORIZONTAL"/>
      <option name="wxVERTICAL"/>
      <option name="wxBOTH"/>
      wxBOTH
    </property>
    <property name="two_step_creation" type="bool" help="添加用于两步创建的构造函数和方法。这需要基类支持两步创建。">0</property>
    <property name="event_handler" type="option" help="仅适用于C++&#x0A;如何声明和实现事件处理程序的方法。">
      <option name="decl_pure_virtual" help="仅将事件处理程序声明为纯虚拟方法。"/>
      <option name="decl" help="声明事件处理程序，但不生成默认实现。实现应该在单独的.cpp文件中完成（而不是在生成的文件中！）。"/>
      <option name="impl_virtual" help="将事件处理程序声明为虚拟方法并生成默认实现。"/>
      impl_virtual
    </property>
    <event name="OnInitDialog" class="wxInitDialogEvent" help="处理一个wxEVT_INIT_DIALOG事件。在初始化对话框或面板时发送wxEVT_INIT_DIALOG。"/>
    <property name="aui_managed" help="由AUI管理器管理此对话框" type="bool">0</property>
    <property name="aui_manager_style" help="配置AUI管理器。" type="bitlist">
      <option name="wxAUI_MGR_DEFAULT" help="默认行为，组合为： wxAUI_MGR_ALLOW_FLOATING | wxAUI_MGR_TRANSPARENT_HINT | wxAUI_MGR_HINT_FADE | wxAUI_MGR_NO_VENETIAN_BLINDS_FADE."/>
      <option name="wxAUI_MGR_ALLOW_FLOATING" help="允许取消停靠窗格，使其采用wxMiniFrame的形式。"/>
      <option name="wxAUI_MGR_ALLOW_ACTIVE_PANE" help="当窗格的标题栏处于激活状态时，更改标题栏的颜色。"/>
      <option name="wxAUI_MGR_TRANSPARENT_DRAG" help="使窗格在移动过程中透明。"/>
      <option name="wxAUI_MGR_TRANSPARENT_HINT" help="停靠的可能位置由半透明区域指示。"/>
      <option name="wxAUI_MGR_VENETIAN_BLINDS_HINT" help="通过逐渐出现部分透明的提示来指示停靠的可能位置。"/>
      <option name="wxAUI_MGR_RECTANGLE_HINT" help="停靠的可能位置由矩形轮廓表示。"/>
      <option name="wxAUI_MGR_HINT_FADE" help="窗格可以停靠的半透明区域逐渐出现。"/>
      <option name="wxAUI_MGR_NO_VENETIAN_BLINDS_FADE" help="用于补充wxAUI_MGR_VENETIAN_LINDS_HINT，以立即显示停靠提示。"/>
      <option name="wxAUI_MGR_LIVE_RESIZE" help="调整停靠窗格的大小时，会实时刷新其内容（而不是单独移动边框并在最后刷新内容）。"/>
      wxAUI_MGR_DEFAULT
    </property>
  </objectinfo>

  <objectinfo class="Wizard" icon="wizard.xpm" type="wizard" startgroup="1">
    <inherits class="wxTopLevelWindow"/>
    <inherits class="wxWindow"/>
    <property name="name" type="text" hidden="1">MyWizard</property>
    <property name="title" type="wxString_i18n"/>
    <property name="bitmap" type="bitmap" help="要显示在向导左侧的位图（默认值：无）。"/>
    <property name="style" type="bitlist">
      <option name="wxCAPTION" help="在对话框上加上标题。"/>
      <option name="wxDEFAULT_DIALOG_STYLE" help="相当于wxCAPTION、wxCLOSE_BOX和wxSYSTEM_MENU的组合（最后一个不在Unix下使用）"/>
      <option name="wxRESIZE_BORDER" help="在窗口周围显示一个可调整大小的框架。"/>
      <option name="wxSYSTEM_MENU" help="显示系统菜单。"/>
      <option name="wxCLOSE_BOX" help="在对话框上显示一个关闭框。"/>
      <option name="wxMAXIMIZE_BOX" help="在对话框上显示最大化框。"/>
      <option name="wxMINIMIZE_BOX" help="在对话框上显示最小化框。"/>
      <option name="wxSTAY_ON_TOP" help="该对话框位于所有其他窗口的顶部。"/>
      <option name="wxDIALOG_NO_PARENT" help="默认情况下，使用NULL父窗口创建的对话框将被赋予应用程序的顶级窗口作为父窗口。使用此样式可以防止这种情况发生，并创建一个孤立对话框。对于模式对话框，不建议这样做。"/>
      wxDEFAULT_DIALOG_STYLE
    </property>
    <property name="extra_style" type="bitlist">
      <option name="wxWIZARD_EX_HELPBUTTON" help="使用wxID_Help显示“帮助”按钮。"/>
    </property>
    <property name="center" type="option" help="将对话框在显示器上按所选方向居中。">
      <option name=""/>
      <option name="wxHORIZONTAL"/>
      <option name="wxVERTICAL"/>
      <option name="wxBOTH"/>
      wxBOTH
    </property>
    <property name="two_step_creation" type="bool" help="添加用于两步创建的构造函数和方法。这需要基类支持两步创建。">0</property>
    <property name="event_handler" type="option" help="仅适用于C++&#x0A;如何声明和实现事件处理程序的方法。">
      <option name="decl_pure_virtual" help="仅将事件处理程序声明为纯虚拟方法。"/>
      <option name="decl" help="声明事件处理程序，但不生成默认实现。实现应该在单独的.cpp文件中完成（而不是在生成的文件中！）。"/>
      <option name="impl_virtual" help="将事件处理程序声明为虚拟方法并生成默认实现。"/>
      impl_virtual
    </property>
    <event name="OnInitDialog" class="wxInitDialogEvent" help="处理一个wxEVT_INIT_DIALOG事件。在初始化对话框或面板时发送wxEVT_INIT_DIALOG。"/>
    <event name="OnWizardPageChanged" class="wxWizardEvent" help="页面刚刚被更改(此事件不能被否决)。"/>
    <event name="OnWizardPageChanging" class="wxWizardEvent" help="页面正在被更改(此事件可以被否决)。"/>
    <event name="OnWizardBeforePageChanged" class="wxWizardEvent" help="在单击Next之后但在调用GetNext之前调用。与EVT_WIZARD_CHANGING不同，此函数的处理程序可以更改可能影响GetNext返回值的状态。此事件可以被否决。"/>
    <event name="OnWizardPageShown" class="wxWizardEvent" help="页面已显示并布局（此事件不能被否决）。"/>
    <event name="OnWizardCancel" class="wxWizardEvent" help="用户试图取消向导（此事件也可能被否决）。"/>
    <event name="OnWizardHelp" class="wxWizardEvent" help="按下向导帮助按钮。 "/>
    <event name="OnWizardFinished" class="wxWizardEvent" help="按下向导完成按钮。"/>
  </objectinfo>

  <objectinfo class="WizardPageSimple" icon="wizpage.xpm" type="wizardpagesimple">
    <inherits class="wxWindow"/>
    <property name="name" type="text">m_wizPage</property>
    <property name="bitmap" type="bitmap" help="页面特定位图（默认值：无）。"/>
  </objectinfo>

  <objectinfo class="MenuBar" icon="menubar.xpm" type="menubar_form" startgroup="1">
    <inherits class="wxWindow"/>
    <property name="name" type="text">MyMenuBar</property>
    <property name="label" type="wxString_i18n">MyMenuBar</property>
    <property name="style" type="bitlist">
      <option name="wxMB_DOCKABLE" help="允许分离菜单栏(仅限wxGTK)。"/>
    </property>
  </objectinfo>

  <objectinfo class="ToolBar" icon="toolbar.xpm" type="toolbar_form">
    <inherits class="wxWindow"/>
    <property name="name" type="text">MyToolBar</property>
    <property name="bitmapsize" type="wxSize" help="每个工具位图的默认大小。默认位图大小为16乘15像素。"/>
    <property name="margins" type="wxSize" help="将用作工具栏边距的值。"/>
    <property name="packing" type="uint" help="间隔工具使用的值。备注: 如果工具栏是水平的，则填充用于垂直方向的间距，如果工具栏是垂直的，则用于水平方向的间距。">1</property>
    <property name="separation" type="uint" help="默认分隔符大小。备注:这是每个工具栏之间的大小。">5</property>
    <property name="style" type="bitlist">
      <option name="wxTB_FLAT" help="使工具栏呈现平面外观(仅限Windows和GTK)。"/>
      <option name="wxTB_DOCKABLE" help="使工具栏可浮动和停靠(仅限GTK)。"/>
      <option name="wxTB_HORIZONTAL" help="指定水平布局。"/>
      <option name="wxTB_VERTICAL" help="指定垂直布局。"/>
      <option name="wxTB_TEXT" help="显示工具栏按钮中的文本;默认情况下只显示图标。"/>
      <option name="wxTB_NOICONS" help="在工具栏按钮中不指定图标；默认情况下会显示它们。"/>
      <option name="wxTB_NODIVIDER" help="指定工具栏上方没有分隔符(边框)(仅限Windows)。"/>
      <option name="wxTB_NOALIGN" help="指定不与父窗口对齐（仅限Windows，不太有用）。"/>
      <option name="wxTB_HORZ_LAYOUT" help="在旁边显示文本和图标，而不是垂直堆叠（仅限Windows和GTK 2）。此样式必须与wxTB_TEXT一起使用。"/>
      <option name="wxTB_HORZ_TEXT" help="wxTB_HORZ_LAYOUT和wxTB_TEXT的组合。"/>
      wxTB_HORIZONTAL
    </property>
  </objectinfo>

</package>
